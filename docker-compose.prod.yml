
# ===========================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# Version: v1.5.0 (Production Hardening)
# Last Updated: 2025-08-04
#
# Evolution: v1.4.0 → v1.5.0
# Added: Resource limits, performance tuning,
#        security hardening, enhanced logging
# ===========================================

services:
  # PostgreSQL Database
  db:
    build:
      context: ./backend/db
      dockerfile: Dockerfile
    container_name: yudai-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # Performance tuning for production
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
      - postgres_backups:/var/lib/postgresql/backups
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - yudai-network
    # Enhanced health check with better timing
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    # Production restart policy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=database,version=v1.5.0"
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yudai-be
    restart: unless-stopped
    # Use environment files for better secrets management
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DB_ECHO=false
      - PYTHONPATH=/app
      - DOCKER_COMPOSE=true
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      # Set GitHub App OAuth credentials
      - GITHUB_APP_CLIENT_ID=${GITHUB_APP_CLIENT_ID}
      - GITHUB_APP_CLIENT_SECRET=${GITHUB_APP_CLIENT_SECRET}
      - GITHUB_APP_INSTALLATION_ID=${GITHUB_APP_INSTALLATION_ID}
      - GITHUB_APP_PRIVATE_KEY_PATH=/app/yudaiv3.2025-09-07.private-key.pem
      - FRONTEND_BASE_URL=${FRONTEND_URL}
      - GITHUB_REDIRECT_URI=${GITHUB_REDIRECT_URI}
      - ALLOW_ORIGINS=${FRONTEND_URL},https://www.yudai.app,https://yudai.app
      - API_DOMAIN=${DOMAIN:-yudai.app}
      - DEV_DOMAIN=${DOMAIN:-yudai.app}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
      # Your additional variables from .env.prod with defaults
      - DOMAIN=${DOMAIN:-yudai.app}
      - FRONTEND_URL=${FRONTEND_URL:-https://yudai.app}
      - BACKEND_URL=${BACKEND_URL:-https://yudai.app/api}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - SALT=${SALT:-yudai-salt}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE:-1}
      # SWE-agent Configuration
      - SWEAGENT_CONFIG_PATH=/app/solver/config.yaml
      - SWEAGENT_DATA_PATH=/data/swe_runs
      - MAX_SOLVE_TIME_MINUTES=30
      - MAX_CONCURRENT_SOLVES=3
      - SOLVER_TIMEOUT_SECONDS=1800
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - app_logs:/app/logs
      - ./backend/yudaiv3.2025-09-07.private-key.pem:/app/yudaiv3.2025-09-07.private-key.pem:ro
      # SWE-agent volumes
      - /var/run/docker.sock:/var/run/docker.sock
      - swe_runs:/data/swe_runs
      - ./backend/solver:/app/solver
    networks:
      - yudai-network
    # Enhanced health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Production restart policy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=backend,version=v1.5.0"
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

  # Frontend Service (nginx with SSL & enhanced security)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Use empty string in prod so frontend calls same-origin paths.
        # Nginx routes /auth/*, /daifu/*, /github/*, /api/* to backend.
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-""}
    container_name: yudai-fe
    restart: unless-stopped
    environment:
      # Explicitly set to empty string to avoid shell expansion issues
      - VITE_API_BASE_URL=
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - yudai-network
    # Enhanced health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    # Production restart policy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=frontend,version=v1.5.0"
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

volumes:
  postgres_data_v2:
    driver: local
    # NOTE: Volume renamed from postgres_data to postgres_data_v2 to force a fresh DB instance for this release.
    # This will not reuse old data. If you need the previous data, migrate before deploying.
  postgres_backups:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ./backups/postgres
  app_logs:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ./logs
  swe_runs:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ./data/swe_runs

networks:
  yudai-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: yudai-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ===========================================
# PRODUCTION DEPLOYMENT NOTES
# ===========================================
#
# v1.5.0 Features Added:
# ✅ Resource limits (prevent resource exhaustion)
# ✅ Enhanced health checks (better reliability)
# ✅ Production logging (structured logs with rotation)
# ✅ Security hardening (capabilities, privileges)
# ✅ Performance tuning (PostgreSQL optimization)
# ✅ Backup volumes (data protection)
# ✅ Network security (custom subnet, isolation)
# ✅ Environment file management (secrets separation)

# ===========================================
