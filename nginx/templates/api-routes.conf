# nginx/templates/api-routes.conf
# Standardized API routing template for YudaiV3
# This file gets included in both dev and prod nginx configurations
#
# Route Structure:
# - /auth/* → Backend Auth API (direct routing)
# - /daifu/* → Backend Daifu API (direct routing)
# - /github/* → Backend GitHub API (direct routing)
# - /api/* → Backend API (future standardized routes)
# - All other routes → Frontend React app

# Set CORS origin based on environment
# This should be set in the main nginx config
# set $cors_origin "https://yudai.app";  # or $host for dynamic

# ===========================================
# BACKEND API ROUTES (Priority 1 - Highest)
# ===========================================

# Auth API routes - Proxy /auth/* to backend /auth/* (preserve prefix for consistency)
location /auth/ {
    proxy_pass http://backend:8000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Enable error interception for JSON error responses
    proxy_intercept_errors on;

    # CORS headers for auth routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests for auth routes
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }

    # Auth-specific timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
}

# Daifu API routes - Strip /daifu prefix when proxying to backend
location /daifu/ {
    # Strip /daifu prefix: /daifu/sessions/* -> /sessions/*, /daifu/github/* -> /github/*
    rewrite ^/daifu/(.*)$ /$1 break;
    proxy_pass http://backend:8000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Enable error interception for JSON error responses
    proxy_intercept_errors on;

    # CORS headers for daifu routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests for daifu routes
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }

    # API-specific timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
}

# GitHub API routes - Strip /github prefix when proxying to backend
location /github/ {
    # Strip /github prefix: /github/repositories -> /repositories
    rewrite ^/github/(.*)$ /$1 break;
    proxy_pass http://backend:8000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Enable error interception for JSON error responses
    proxy_intercept_errors on;

    # CORS headers for github routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests for github routes
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }

    # API-specific timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
}

# Future standardized API routes - ALL /api/* requests go to backend
location /api/ {
    # Remove /api prefix and proxy to backend
    rewrite ^/api/(.*)$ /$1 break;
    proxy_pass http://backend:8000/;

    # Enable error interception for JSON error responses
    proxy_intercept_errors on;

    # Standard proxy headers for API communication
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # CORS headers for API routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }

    # API-specific timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
}

# ===========================================
# FRONTEND ROUTES (Priority 2 - Default)
# ===========================================

# All other routes serve the React app
# React Router handles all frontend routing including /auth/success, /auth/login
location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /index.html;
}

# ===========================================
# UTILITY ROUTES
# ===========================================

# Health check - exclude from access logs for performance
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}

# ===========================================
# ERROR HANDLING
# ===========================================

# Return JSON errors instead of HTML for proxy failures
error_page 502 503 504 = @proxy_error;

location @proxy_error {
    default_type application/json;
    return 502 '{"error": "Backend service unavailable", "message": "The authentication service is temporarily unavailable. Please try again later."}';
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
    add_header Access-Control-Allow-Credentials "true" always;
}
