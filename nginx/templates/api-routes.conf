# nginx/templates/api-routes.conf
# Standardized API routing template for YudaiV3
# This file gets included in both dev and prod nginx configurations
#
# Route Structure:
# - /api/* → Backend API (automatic for all new APIs)
# - /auth/callback → Backend OAuth (special case)
# - /auth/api/* → Backend Auth API
# - All other routes → Frontend React app

# Set CORS origin based on environment
# This should be set in the main nginx config
# set $cors_origin "https://yudai.app";  # or $host for dynamic

# ===========================================
# BACKEND API ROUTES (Priority 1 - Highest)
# ===========================================

# Standard API routing - ALL /api/* requests go to backend
location /api/ {
    # Remove /api prefix and proxy to backend
    rewrite ^/api/(.*)$ /$1 break;
    proxy_pass http://backend:8000;

    # Standard proxy headers for API communication
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # CORS headers for API routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }

    # API-specific timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
}

# OAuth callback - Direct backend route (no /api prefix)
location = /auth/callback {
    proxy_pass http://backend:8000/auth/callback;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # CORS headers for OAuth callback
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Credentials "true" always;
}

# Auth API routes (additional auth endpoints that might not follow /api/* pattern)
location /auth/api/ {
    proxy_pass http://backend:8000/auth/api/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # CORS headers for auth API routes
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight OPTIONS requests for auth routes
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }
}

# ===========================================
# FRONTEND ROUTES (Priority 2 - Default)
# ===========================================

# All other routes serve the React app
# React Router handles all frontend routing including /auth/success, /auth/login
location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /index.html;
}

# ===========================================
# UTILITY ROUTES
# ===========================================

# Health check - exclude from access logs for performance
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}
